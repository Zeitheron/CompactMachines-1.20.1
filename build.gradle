buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'

def semver = CM_SEMVER_VERSION
def buildNumber = CM_BUILD_NUM

def nightlyVersion = "${semver}.${buildNumber}"
def isRelease = (CM_RELEASE ?: "false").equalsIgnoreCase("true")

task getBuildInfo() {
    println("Mod ID: ${mod_id}")
    println("Version: ${isRelease ? semver : nightlyVersion}")
    println("Semver Version: ${semver}")
    println("Nightly Build: ${nightlyVersion}")
}

version = isRelease ? "${semver}" : nightlyVersion
group = "dev.compactmods"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceSets {
    api {
        resources.srcDirs = []
        compileClasspath += configurations.getByName("minecraft")
    }

    datagen {
        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    tunnels {
        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }

    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
            srcDir "src/generated/resources"
        }

        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.tunnels.output
        runtimeClasspath += sourceSets.tunnels.output
    }

    test {
        java { srcDir "src/test/java" }
        resources { srcDir "src/test/resources" }

        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            if(!System.getenv().containsKey("CI")) {
                // JetBrains Runtime Hotswap
                jvmArg '-XX:+AllowEnhancedClassRedefinition'
                jvmArg '-XX:HotswapAgent=fatjar'
            }

            args '--username', 'Zeitheron'

            mods {
                compactmachines {
                    source sourceSets.tunnels
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            if(!System.getenv().containsKey("CI")) {
                // JetBrains Runtime Hotswap
                jvmArg '-XX:+AllowEnhancedClassRedefinition'
                jvmArg '-XX:HotswapAgent=fatjar'
            }

            mods {
                compactmachines {
                    source sourceSets.tunnels
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', mod_id
            args '--existing', file('src/main/resources')
            args '--all'
            args '--output', file('src/generated/resources/')

            if(!System.getenv().containsKey("CI")) {
                // JetBrains Runtime Hotswap
                jvmArg '-XX:+AllowEnhancedClassRedefinition'
                jvmArg '-XX:HotswapAgent=fatjar'
            }

            mods {
                compactmachines {
                    source sourceSets.tunnels
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.datagen
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/gametest')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            if(!System.getenv().containsKey("CI")) {
                // JetBrains Runtime Hotswap
                jvmArg '-XX:+AllowEnhancedClassRedefinition'
                jvmArg '-XX:HotswapAgent=fatjar'
            }
            
            mods {
                compactmachines {
                    source sourceSets.tunnels
                    source sourceSets.api
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Zeitheron Maven"
        url = "https://maven.zeith.org/"
        content {
            includeGroupByRegex "org\\.zeith.*"
        }
    }

    mavenLocal()

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/" // location of the maven that hosts JEI files since January 2023
        content {
            includeGroupByRegex "mezz\\.jei.*"
        }
    }

    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("org.zeith.hammerlib:HammerLib-${minecraft_version}:${hl_version}")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${jei_version}")

    // The One Probe
    implementation(fg.deobf("curse.maven:theoneprobe-245211:5159287"))
    implementation(fg.deobf("curse.maven:jade-324717:5072729"))
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

compileDatagenJava {
    options.encoding = 'UTF-8'
}

jar {
    from sourceSets.tunnels.output
    from sourceSets.main.output
    from sourceSets.api.output
    destinationDirectory = file("$rootDir/build-out")

    finalizedBy('reobfJar')

    manifest {
        attributes([
                "Specification-Title"     : "Compact Machines",
                "Specification-Vendor"    : "",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    // Sources included because of MinecraftForge/ForgeGradle#369
    archiveClassifier = 'api'
    destinationDirectory = file("$rootDir/build-out")
}

artifacts {
    archives jar, apiJar
}

publishing {
    publications {
        release(MavenPublication) {
            artifactId = mod_id
            groupId = "dev.compactmods"

            artifacts {
                artifact jar
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }

        nightly(MavenPublication) {
            artifactId = mod_id
            groupId = "dev.compactmods.nightly"

            artifacts {
                artifact(jar)
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactMachines"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
